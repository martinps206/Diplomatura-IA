# core/explanations.py
def general_intro():
    return (
        "üìö **Introducci√≥n a las Distribuciones de Probabilidad**\n\n"
        "Una distribuci√≥n de probabilidad describe c√≥mo se comporta una variable aleatoria.\n"
        "Las *discretas* modelan conteos o sucesos separados (p.ej., √©xitos, clicks, eventos),\n"
        "mientras que las *continuas* modelan magnitudes que pueden tomar infinitos valores (p.ej., tiempo, temperatura, error).\n\n"
        "Las distribuciones son el n√∫cleo de la estad√≠stica y la inferencia en IA, ya que permiten:\n"
        "- Modelar incertidumbre y ruido.\n"
        "- Definir funciones de p√©rdida derivadas de la verosimilitud.\n"
        "- Formular modelos bayesianos.\n"
        "- Evaluar el rendimiento de modelos bajo incertidumbre.\n"
    )


def inference_intro():
    return (
        "üéØ **Introducci√≥n a la Inferencia Estad√≠stica**\n\n"
        "La inferencia busca deducir propiedades de una poblaci√≥n a partir de una muestra.\n"
        "Se basa en estimar par√°metros, probar hip√≥tesis y cuantificar el error.\n\n"
        "üìä Conceptos clave:\n"
        "- Error tipo I (Œ±): rechazar una hip√≥tesis verdadera.\n"
        "- Error tipo II (Œ≤): no rechazar una hip√≥tesis falsa.\n"
        "- Potencia: 1‚àíŒ≤ (capacidad de detectar diferencias reales).\n"
        "- p-valor: evidencia contra la hip√≥tesis nula.\n"
        "- Intervalos de confianza: rango probable para el par√°metro real.\n\n"
        "üí° En IA, la inferencia se usa en validaci√≥n de modelos, selecci√≥n de caracter√≠sticas,\n"
        "detecci√≥n de sesgos, y an√°lisis de significancia de resultados experimentales."
    )


def ai_applications_summary():
    return (
        "ü§ñ **Aplicaciones Directas en Inteligencia Artificial**\n\n"
        "1Ô∏è‚É£ **Regresi√≥n lineal:** Asume ruido gaussiano en la variable dependiente.\n"
        "2Ô∏è‚É£ **Clasificaci√≥n binaria:** Modela la variable objetivo como Bernoulli/Binomial.\n"
        "3Ô∏è‚É£ **Conteos:** Usa modelos Poisson o binomial negativa.\n"
        "4Ô∏è‚É£ **Bayesianismo:** Emplea priors conjugados (ej. Beta-Binomial) para actualizar creencias.\n\n"
        "Ejemplo: con prior Beta(Œ±,Œ≤) y k √©xitos en n ensayos, la posterior es Beta(Œ±+k, Œ≤+n‚àík).\n"
        "Esto se aplica en IA para modelar tasas de conversi√≥n, fiabilidad de clasificadores o ajuste din√°mico de hiperpar√°metros."
    )


def explain_expectation(value):
    """Genera una explicaci√≥n amigable de la esperanza (valor esperado).

    Args:
        value (float): Valor de la esperanza (E[X]).

    Returns:
        str: Texto explicativo breve (tambi√©n imprime en consola para uso CLI).
    """
    text = (
        f"üîé Esperanza (E[X]): {value:.4f}\n"
        "La esperanza representa el valor promedio que tomar√≠a la variable aleatoria\n"
        "si repiti√©ramos el experimento un gran n√∫mero de veces. No siempre es un valor\n"
        "posible de observar en una muestra puntual, pero s√≠ el centro de la distribuci√≥n.\n"
    )
    print(text)
    return text


def explain_variance(value):
    """Genera una explicaci√≥n amigable de la varianza.

    Args:
        value (float): Valor de la varianza (Var[X]).

    Returns:
        str: Texto explicativo breve (tambi√©n imprime en consola para uso CLI).
    """
    text = (
        f"üìê Varianza (Var[X]): {value:.4f}\n"
        "La varianza mide la dispersi√≥n alrededor de la esperanza.\n"
        "Una varianza peque√±a indica que los valores tienden a agruparse cerca de la media,\n"
        "mientras que una varianza grande indica mayor dispersi√≥n.\n"
    )
    print(text)
    return text


__all__ = [
    "general_intro",
    "inference_intro",
    "ai_applications_summary",
    "explain_expectation",
    "explain_variance",
]
