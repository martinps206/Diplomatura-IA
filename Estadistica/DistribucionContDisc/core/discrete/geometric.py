import numpy as np
from scipy.stats import geom
from core.base_distribution import BaseDistribution

class GeometricDistribution(BaseDistribution):
    def __init__(self, p: float):
        self.p = p

    def pmf(self, k):
        return geom.pmf(k, self.p)

    def mean(self):
        return 1 / self.p

    def variance(self):
        return (1 - self.p) / (self.p ** 2)

    def sample(self, n_samples):
        return np.random.geometric(self.p, n_samples)

    def explain(self):
        return (
            "ğŸ“˜ **DistribuciÃ³n GeomÃ©trica**\n"
            "Modela el nÃºmero de ensayos hasta el primer Ã©xito.\n\n"
            "E[X] = 1/p\nVar(X) = (1âˆ’p)/pÂ²\n\n"
            "ğŸ’¡ **AplicaciÃ³n en IA**: Ãºtil para modelar el nÃºmero de iteraciones hasta que un algoritmo converge o el nÃºmero de intentos hasta un resultado positivo."
        )
